{"type":"data","nodes":[null,{"type":"data","data":[{"summaries":1},[2,8,15,21,27,33],{"slug":3,"title":4,"categories":5,"createdOn":6,"searchTerms":7},"chinese","中文測試",[3],["Date","2023-01-31T15:10:13.000Z"],"中文測試 chinese",{"slug":9,"title":10,"categories":11,"createdOn":13,"searchTerms":14},"contrib","Contributing",[12],"english",["Date","2023-01-18T18:01:13.000Z"],"contributing english",{"slug":16,"title":17,"categories":18,"createdOn":19,"searchTerms":20},"cake","This was a triumph",[12],["Date","2023-01-04T13:43:12.000Z"],"this was a triumph english",{"slug":22,"title":23,"categories":24,"createdOn":25,"searchTerms":26},"safety","Safety notice",[12],["Date","2023-01-04T13:43:12.000Z"],"safety notice english",{"slug":28,"title":29,"categories":30,"createdOn":31,"searchTerms":32},"welcome","Welcome to the Aperture Science computer-aided enrichment center",[12],["Date","2023-01-04T13:43:12.000Z"],"welcome to the aperture science computer-aided enrichment center english",{"slug":34,"title":35,"categories":36,"createdOn":38,"searchTerms":39},"test","Svelte Prototype",[12,37],"testing",["Date","2023-01-04T11:09:40.000Z"],"svelte prototype english testing"],"uses":{"url":1}},{"type":"data","data":[{"title":1,"content":2,"categories":3,"createdOn":5,"updatedOn":6},"中文測試","# 中文測試\n\n### 上集解答\n\n```Kotlin\nfun main(){\n    var score =readln().toInt()\n    if(score\u003C40){\n\t\tprintln(\"D\")\n    }\n    else if(score\u003C60){\n\t\tprintln(\"B\")\n    }\n    else if(score\u003C90){\n\t\tprintln(\"C\")\n    }\n    else{\n\t\tprintln(\"A\")\n    }\n}\n\n```\n\n大家都有做對嗎？\n\n可能很多人會用&&限制資料的範圍，不過其實我們可以善加利用 if 判斷事物的時間順序喔。\n\n---\n\n## 迴圈\n\n迴圈也是電腦程式設計中一個不可或缺的東西，想像一下今天要你顯示 hello 三遍，你會怎麼做？\n\n```kotlin\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\n\n```\n\n那如果要五十遍呢？\n\n```kotlin\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\nprintln(\"Hello\")\n```\n\n細心的小夥伴肯定發現了，我其實只顯示 49 次而已，真的太容易出錯了對吧。\n\n所以顯然這樣子不對，我們應該使用更好的工具，而迴圈就是讓我們可以不斷執行重複的程式碼喔。\n\n先來教第一種寫法 while 迴圈，語法長這樣\n\n```kotlin\nwhile(布林值){\n\n}\n\n```\n\n使用方法其實跟 if 一模一樣，只要括號內為 true，但是跟 if 不一樣，他每次執行都會先看是否為 true，只要為 true 就執行裡面的程式碼，然後再重新判斷一次。\n\n比如剛剛說要顯示 hello 50 次，就可以這樣寫。\n\n```kotlin\nvar i = 1\nwhile(i\u003C=50){\n\tprintln(\"Hello\")\n\ti+=1\n}\n```\n\n再來介紹第二種迴圈寫法，這種其實更適合剛剛的範例，因為程式碼可以更節儉，這個寫法叫做 for，長這樣。\n\n```kotlin\nfor(i in a..b){\n\n}\n```\n\n這一個寫法跟下面這個幾乎一模一樣喔，會讓我們的迴圈中有一個變數 i 可以用（當然也可以不叫 i，自己取）\n\n```kotlin\nvar i = a\nwhile(i\u003C=b){\n\n\ti+=1\n}\n```\n\n所以今天比如今天我們要輸出 N 以內的數字我們可以這樣寫\n\n```kotlin\nvar n = 10\nfor(i in 0..n){\n\tprintln(i)\n}\n```\n\n這個寫法的優點是他可以在我們遍歷整數的時候看起來更直覺漂亮，不過有些時候還是 while 比較好用，至於哪些時候，就有待讀者自己去發掘啦。\n\n另外其實 kotlin 還有很多種迴圈寫法喔，不過這裡就不再介紹了～\n\n### 課堂練習～\n\n你知道 fizzbuzz 嗎？他是一個很有名的迴圈練習程式，我們來試試看吧。\n\n總共輸出 N 行，如果行數是 3 的倍數就輸出 fizz，5 的倍數就輸出 buzz，15 的倍數就輸出 fizzbuzz，如果是以外的\n\n比如 16 的 fizzbuzz 就是\n\n```kotlin\n1\n2\nfizz\n4\nbuzz\nfizz\n7\n8\nfizz\nbuzz\n11\nfizz\n13\n14\nfizzbuzz\n16\n```\n\n### 輸入\n\n一個正整數代表要 N 行的 fizzbuzz\n\n### 輸出\n\n輸出 N 行的 fizzbuzz\n",[4],"chinese",["Date","2023-01-31T15:10:13.000Z"],["Date","2023-02-13T13:57:12.000Z"]],"uses":{"params":["slug"],"url":1}}]}